(define (domain keva)
  (:requirements :strips :typing :conditional-effects :probabilistic-effects :mdp)
  (:types robot plank orientated region)
  (:predicates
  		   (onTable ?p - plank)
  		   (onSinglePlank ?p - plank ?p - plank)
           (onDoublePlank ?p - plank ?p - plank ?p - plank)
           (clearPlank ?p - plank)
  		   (handempty)
  		   (inGripper ?p - plank)
  		   (orientation ?p - plank ?o - orientated)
           (placed ?p - plank))

  (:constants
           vertical - orientated horizontal - orientated
           region_1 - region region_2 - region region_3 - region)

  (:action pickUp_plank_from_region
  		 :parameters (?rob - robot ?p - plank ?r - region)
  		 :precondition (and (handempty)
                            (clearPlank ?p))
  		 :effect (and (not (handempty))
                      (inGripper ?p)
                      (not (clearPlank ?p))
                      (forall (?pl - plank)
                            (when (and (onSinglePlank ?p ?pl)
                                       (not (= ?p ?pl)))
                                  (and (not(onSinglePlank ?p ?pl))
                                       (clearPlank ?pl)))))
  )

  (:action putDown_plank_vertically_onTable
  		 :parameters (?rob - robot ?p - plank)
  		 :precondition (and (not (handempty))
                            (inGripper ?p)
                            (not (placed ?p)))
  		 :effect (and (handempty)
                      (onTable ?p)
                      (clearPlank ?p)
                      (orientation ?p vertical)
                      (not (inGripper ?p))
                      (placed ?p))
  )

  (:action putDown_plank_horizontally_onTable
  		 :parameters (?rob - robot ?p - plank)
  		 :precondition (and (not (handempty))
                          (inGripper ?p)
                          (not (placed ?p)))
  		 :effect (and (handempty)
                    (onTable ?p)
                    (orientation ?p horizontal)
                    (not (inGripper ?p))
                    (clearPlank ?p)
                    (placed ?p))
  )

  (:action human_place
    :parameters (?plank - plank)
    :precondition (and
        (not (human_placed ?plank))
    )
    :effect (and
        (human_placed ?l)
        (probabilistic
            0.3 (and (at ?plank region_1))
            0.3 (and (at ?plank region_2))
            0.4 (and (at ?plank region_3))
        )
    )

  (:action putDown_plank_vertically_onPlank
  		 :parameters (?rob - robot ?p1 - plank ?p2 - plank)
  		 :precondition (and (not (handempty))
                          (inGripper ?p1)
                          (not (= ?p1 ?p2))
                          (not (placed ?p1))
                          (placed ?p2))
  		 :effect (and (handempty)
                      (onSinglePlank ?p1 ?p2)
                      (not (clearPlank ?p2))
                      (orientation ?p1 vertical)
                      (not (inGripper ?p1))
                      (clearPlank ?p1)
                      (placed ?p1))
  )

  (:action putDown_plank_horizontally_onSinglePlank
  		 :parameters (?rob - robot ?p1 - plank ?p2 - plank)
  		 :precondition (and (not (handempty))
                            (inGripper ?p1)
                            (not (= ?p1 ?p2))
                            (not (placed ?p1))
                            (placed ?p2))
  		 :effect (and (handempty)
                      (onSinglePlank ?p1 ?p2)
                      (not (inGripper ?p1))
                      (not (clearPlank ?p2))
                      (orientation ?p1 horizontal)
                      (clearPlank ?p1)
                      (placed ?p1))
  )

  (:action putDown_plank_horizontally_onDoublePlank
  		 :parameters (?rob - robot ?p1 - plank ?p2 - plank ?p3 - plank)
  		 :precondition (and (not (handempty))
                            (inGripper ?p1)
                            (not (= ?p1 ?p2))
                            (not (= ?p1 ?p3))
                            (not (= ?p2 ?p3))
                            (not (placed ?p1))
                            (placed ?p2)
                            (placed ?p3)
                            (or (and (orientation ?p2 horizontal) (orientation ?p3 horizontal)) (and (orientation ?p2 vertical) (orientation ?p3 vertical))))
  		 :effect (and (handempty)
                      (not (inGripper ?p1))
                      (onDoublePlank ?p1 ?p2 ?p3)
                      (orientation ?p1 horizontal)
                      (not (clearPlank ?p2))
                      (not (clearPlank ?p3))
                      (clearPlank ?p1)
                      (placed ?p1))
  )


)
