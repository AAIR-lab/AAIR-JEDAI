(define (problem keva-problem)
(:domain keva)
(:objects top1_1 top1_2 top1_3 bottom1_1 bottom1_2 bottom1_3 side1_3 side1_4 top2_1 top2_2 top2_3 bottom2_1 bottom2_2 bottom2_3 side2_3 side2_4 top3_1 top3_2 top3_3 bottom3_1 bottom3_2 bottom3_3 side3_3 side3_4 - loc
 region1_1 region1_2 region1_3 region2_1 region2_2 region2_3 region3_1 region3_2 region3_3 - region
 plank1 plank2 plank3 - plank
)



(:INIT (clearLoc top1_1) (clearLoc top1_2) (clearLoc top1_3) (clearLoc bottom1_1) (clearLoc bottom1_2) (clearLoc bottom1_3) (clearLoc side1_3) (clearLoc side1_4)
 (clearLoc top2_1) (clearLoc top2_2) (clearLoc top2_3) (clearLoc bottom2_1) (clearLoc bottom2_2) (clearLoc bottom2_3) (clearLoc side2_3) (clearLoc side2_4)
 (clearLoc top3_1) (clearLoc top3_2) (clearLoc top3_3) (clearLoc bottom3_1) (clearLoc bottom3_2) (clearLoc bottom3_3) (clearLoc side3_3) (clearLoc side3_4)

 
 (belongTo top1_1 plank1) (belongTo top1_2 plank1) (belongTo top1_3 plank1) (belongTo bottom1_1 plank1) (belongTo bottom1_2 plank1) (belongTo bottom1_3 plank1) (belongTo side1_3 plank1) (belongTo side1_4 plank1)
 
 (belongTo top2_1 plank2) (belongTo top2_2 plank2) (belongTo top2_3 plank2) (belongTo bottom2_1 plank2) (belongTo bottom2_2 plank2) (belongTo bottom2_3 plank2) (belongTo side2_3 plank2) (belongTo side2_4 plank2)
 
 (belongTo top3_1 plank3) (belongTo top3_2 plank3) (belongTo top3_3 plank3) (belongTo bottom3_1 plank3) (belongTo bottom3_2 plank3) (belongTo bottom3_3 plank3) (belongTo side3_3 plank3) (belongTo side3_4 plank3)


 (regionBelongTo region1_1 plank1) (regionBelongTo region1_2 plank1) (regionBelongTo region1_3 plank1)
 (regionBelongTo region2_1 plank2) (regionBelongTo region2_2 plank2) (regionBelongTo region2_3 plank2)
 (regionBelongTo region3_1 plank3) (regionBelongTo region3_2 plank3) (regionBelongTo region3_3 plank3)

 (handempty)
)

(:goal (and (onTable side1_3) (onTable side2_3))  ))
